import os
import re
import numpy as np
import pandas as pd
import chromadb
from pathlib import Path
import google.generativeai as genai
from langchain.vectorstores import Chroma
from langchain.schema import Document
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_google_genai import GoogleGenerativeAIEmbeddings

from dotenv import load_dotenv
load_dotenv('.env')

llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash")
embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-004")

GEMINI_API_KEY = os.environ['GEMINI_API_KEY']
genai.configure(api_key=GEMINI_API_KEY)

SUBTITLES_FOLDER = 'subtitles'
METADATA_FILE = "subtitles_metadata.csv"
CHROMA_DB_DIRECTORY = "chroma_db"

Path(CHROMA_DB_DIRECTORY).mkdir(parents=True, exist_ok=True)

def parse_srt_file(file_path):
    """
    Parses an srt file and extracts subtitles with timestamps.
    Returns a list of dictionaries with the video_id, timestamp, text, and link.
    """
    video_id = Path(file_path).stem
    subtitles = []
    
    with open(file_path, "r", encoding="utf-8") as file:
        content = file.read()

#    blocks = re.split(r"\n\s*\n", content.strip())
    blocks = content.strip().split("\n\n")
    for block in blocks:
        lines = block.split("\n")
        if len(lines) >= 3:
            try:
                timestamp_line = lines[1]
                start_time_match = re.search(r"\((\d+)\)", timestamp_line)
                if start_time_match:
                    start_time = int(start_time_match.group(1))  # Extract the seconds
                else:
                    raise ValueError(f"Invalid timestamp line: {timestamp_line}")
                visible_timestamp = timestamp_line.split(" (")[0]
                text = " ".join(lines[2:])
                link = f"https://youtu.be/{video_id}?t={start_time}"

                subtitles.append({
                    "video_id": video_id,
                    "start_time": start_time,
                    "timestamp": visible_timestamp,
                    "text": text,
                    "link": link
                })            
                
            except Exception as e:
                print(f"Error parsing block: {block}\n{e}")
    print(subtitles)
    return subtitles

def create_embeddings(texts):
    """
    Generates embeddings using Gemini model.
    """
    embeddings = []
    for text in texts:
        result = genai.embed_content(
            model="models/text-embedding-004",
            content=text
        )
        embeddings.append(result["embedding"])
    print(embeddings)
    return np.array(embeddings)

def main():
    all_subtitles = []
    for file in Path(SUBTITLES_FOLDER).glob("*.srt"):
        subtitles = parse_srt_file(file)
        all_subtitles.extend(subtitles)

    if not all_subtitles:
        print("No subtitles found to process.")
        return

    texts = [item["text"] for item in all_subtitles]
    metadata = pd.DataFrame(all_subtitles)

    print("Generating embeddings using Gemini...")
    embeddings = create_embeddings(texts)

    metadata.to_csv(METADATA_FILE, index=False)
    print(f"Saved metadata to {METADATA_FILE}")

    print("Saving embeddings and metadata to Chroma DB...")
    documents = [
        Document(page_content=text, metadata=row)
        for text, row in zip(texts, all_subtitles)
    ]

    subtitlesdb = Chroma.from_documents(
    documents=documents,
    embedding_function=lambda text: genai.embed_content(
            model="models/text-embedding-004",
            content=text
        )["embedding"],
    persist_directory=CHROMA_DB_DIRECTORY
    )
    subtitlesdb.persist()
    print("Data successfully saved to Chroma DB.")
    
if __name__ == "__main__":
    main()